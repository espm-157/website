{"kind":"Notebook","sha256":"d80bfbb6e07c87f1c400e63551c95d0e0e891a678d26f647ae1d14fae1c8cf8e","slug":"ibis-1","location":"/reading/05-ibis-1.ipynb","dependencies":[],"frontmatter":{"title":"ibis Single Table Verbs","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/espm-157/website","exports":[{"format":"ipynb","filename":"05-ibis-1.ipynb","url":"/website/build/05-ibis-1-5688d278cf34d91536b71938e10d2063.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will be focusing on how to use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cjZvdCnKGb"},{"type":"inlineCode","value":"ibis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lWikSuBwkH"},{"type":"text","value":" package, a successor to the popular ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WLM4gPshCF"},{"type":"inlineCode","value":"pandas","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wlLJxgGHe5"},{"type":"text","value":" package, for manipulating tabular data. We begin by importing the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GVVnPJna9F"},{"type":"inlineCode","value":"ibis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IrVPfExYX6"},{"type":"text","value":" package.   (We include two additional imports from the package which are commonly referred to using their short names, the table placeholder ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VVYlC40hLm"},{"type":"inlineCode","value":"_","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FoCs8gOXPq"},{"type":"text","value":" instead of ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YyOQ0i4jez"},{"type":"inlineCode","value":"ibis._","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xm0NFpdfyb"},{"type":"text","value":", and the selectors methods as ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"laCy3nhw3T"},{"type":"inlineCode","value":"s","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"okZM4AiK3Y"},{"type":"text","value":" instead of the verbose ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pjcO4L1VYC"},{"type":"inlineCode","value":"ibis.selectors","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hBtIYKamgo"},{"type":"text","value":".  We will see these in action later).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vBe7YgZsvO"}],"key":"Ui9crUkctt"},{"type":"heading","depth":2,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Ig1fxKoQZB"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"fIBuACh0m9"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"establish a connection with ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ltVl5mj4Li"},{"type":"inlineCode","value":"duckdb.connect()","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"IupupewBvz"}],"key":"Q1lKtGfyXf"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"use ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Ig5mDV12Kk"},{"type":"inlineCode","value":"head()","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"nBkPWRaby2"},{"type":"text","value":" and ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"s3erv9X7q3"},{"type":"inlineCode","value":"excute()","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"oDnVTDyMBK"},{"type":"text","value":" to preview large data","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"VgmVffR4LJ"}],"key":"RYS36d0QGX"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"use ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Svir1Q7NmB"},{"type":"inlineCode","value":"select()","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"C0bx9HLlZV"},{"type":"text","value":", ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"fwbpZRrNyN"},{"type":"inlineCode","value":"distinct()","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"DBeviboL9O"},{"type":"text","value":", ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"K5wVUwwdqU"},{"type":"inlineCode","value":"filter()","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"cO8645q48j"},{"type":"text","value":" to explore data.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"tqRfLmQKda"}],"key":"bP5LsZDZjZ"}],"key":"CkPnOknN0q"},{"type":"heading","depth":2,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Getting started","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"o8DnFSZjw2"}],"identifier":"getting-started","label":"Getting started","html_id":"getting-started","implicit":true,"key":"e0UpeUB5bu"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"To use ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"MuqMe6dcWQ"},{"type":"inlineCode","value":"ibis","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"rFf2OyIfaR"},{"type":"text","value":", we must also select a backend.  We will always be using the quite new and very powerful ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"SYMPxWpWZt"},{"type":"inlineCode","value":"duckdb","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"WevZgbWPtG"},{"type":"text","value":" backend for all of our tasks.  We select a backend by creating a “connection”.  The details here are not important for us, we can treat this first block as “boilerplate” starting code.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"C9JR3MdNW3"}],"key":"wg4hjr7S4S"}],"key":"JeNIxNeLdT"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import ibis\nfrom ibis import _\nimport ibis.selectors as s\n\ncon = ibis.duckdb.connect()","key":"ZrTjvdOZwv"},{"type":"output","id":"vWCw9PhZ743MYrGNyWKOF","data":[],"key":"KkJD8LObKv"}],"key":"aGM08pus7A"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We are now ready to read in our data.  We will begin by reading the metrics table from the direct access link, as indicated in the URL below.  ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"x0VwSJBIhY"},{"type":"inlineCode","value":"con.read_csv()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yhVAzDaKND"},{"type":"text","value":" is quite similar to the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KpjsyLyld7"},{"type":"inlineCode","value":"pandas.read_csv()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W70n87SLB4"},{"type":"text","value":" we saw in module 1, though the optional arguments get some different names and are not quite as flexibile.  One important option for our purposes will be the how to indicate missing values.  In the past, we’ve seen negative values like ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z7XsndIChG"},{"type":"inlineCode","value":"-99","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"L6FmQtwp9i"},{"type":"text","value":" be used to indicate missing values.  That convention reflects limitations of early software, which had no natural concept of “missing”. More modern conventions indicating missing values as “NULL” or “NA”.  We indicate the data has chosen the latter:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JW48Z9x7RB"}],"key":"OK0lYbIcmK"}],"key":"Rcc7pbKMHl"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"metrics_url = \"https://huggingface.co/datasets/cboettig/ram_fisheries/resolve/main/v4.65/tsmetrics.csv\"\ntsmetrics = con.read_csv(metrics_url, nullstr=\"NA\")\n","key":"pm9C9NxUja"},{"type":"output","id":"fiyJpPthtR_54wa_CGUKC","data":[],"key":"SKtZNJxVuW"}],"key":"KJnS4SCeCt"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Previewing data: ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AxlbDq1Tyw"},{"type":"inlineCode","value":"head()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RJnBHGn3Rs"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EE2fOFoH19"},{"type":"inlineCode","value":"execute()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J64JKEpAbq"}],"identifier":"previewing-data-head-and-execute","label":"Previewing data: head() and execute()","html_id":"previewing-data-head-and-execute","implicit":true,"key":"RhJqTa2T75"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s take a look at our new table:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sKKJmzws3F"}],"key":"NA4gleXaQt"}],"key":"I3wFmuiRD1"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"tsmetrics","key":"viLcUK4LwG"},{"type":"output","id":"TYTUfKJnoSnnvAbIwvJIZ","data":[{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"text/html":{"content":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">DatabaseTable: ibis_read_csv_lnkh36a47bbdhi4vbfj7tetgry\n  tscategory   string\n  tsshort      string\n  tslong       string\n  tsunitsshort string\n  tsunitslong  string\n  tsunique     string\n</pre>\n","content_type":"text/html"},"text/plain":{"content":"DatabaseTable: ibis_read_csv_lnkh36a47bbdhi4vbfj7tetgry\n  tscategory   string\n  tsshort      string\n  tslong       string\n  tsunitsshort string\n  tsunitslong  string\n  tsunique     string","content_type":"text/plain"}}}],"key":"ErwwinGdoo"}],"key":"obDrcIPzdg"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This doesn’t look like a pretty pandas table! Where are the values?  Actually, as we become more familiar with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rkhlIHCvVE"},{"type":"inlineCode","value":"ibis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EUFMSMiOq2"},{"type":"text","value":" we learn to appreciate the display choice here.  ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uF280D5D8w"},{"type":"inlineCode","value":"ibis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jKqg1UUivJ"},{"type":"text","value":" is designed for working with very big data. An important part of this is something called ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pLeWXING7J"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"lazy evaluation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XvzvU05WiT"}],"key":"mcznK8b5fn"},{"type":"text","value":". Even downloading a very large fle might take a long time, and trying to load a large dataset into python all at once can exceed available RAM and crash the kernel.  Instead, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ek0yQdIcVb"},{"type":"inlineCode","value":"ibis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QkVn1KWNdn"},{"type":"text","value":" merely “peeks” at the data over the remote connection -- without even downloading it! It tells us the names of each column and the data type (e.g. string, or numeric, etc) that the read_csv method has ‘guessed’ for the data.  As we will see, this is often the most useful information anway.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QnijMjN8z8"}],"key":"xEFhmdpnaK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"If we we do want to see a few example rows, we can use the method ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Qj9WnvaE5Z"},{"type":"inlineCode","value":"head()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"u4g5LZQYds"},{"type":"text","value":" on the table, ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ouBrHqsVK1"},{"type":"inlineCode","value":"tsmetrics.head()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MHDRxttqiS"},{"type":"text","value":", to say we want only want to see the top of the data frame.  Optionally we can specify how many rows we want to preview, e.g. ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IppdtHXjlD"},{"type":"inlineCode","value":"tsmetrics.head(10)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OvpVbgj0Ai"},{"type":"text","value":" to see 10 (the default is 5). Let’s try it:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kquUOe7u2n"}],"key":"gvh5Wi5mPE"}],"key":"PpMLMJp6m2"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"tsmetrics.head()","key":"gDhdOqQ88t"},{"type":"output","id":"ZN0ENLEodNgXDUPOkGclo","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/html":{"content":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">r0 := DatabaseTable: ibis_read_csv_lnkh36a47bbdhi4vbfj7tetgry\n  tscategory   string\n  tsshort      string\n  tslong       string\n  tsunitsshort string\n  tsunitslong  string\n  tsunique     string\n\nLimit[r0, n=5]\n</pre>\n","content_type":"text/html"},"text/plain":{"content":"r0 := DatabaseTable: ibis_read_csv_lnkh36a47bbdhi4vbfj7tetgry\n  tscategory   string\n  tsshort      string\n  tslong       string\n  tsunitsshort string\n  tsunitslong  string\n  tsunique     string\n\nLimit[r0, n=5]","content_type":"text/plain"}}}],"key":"YsKJbVumZN"}],"key":"qmMvagK2ZL"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"That’s not the top of 5 rows!  Once again, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AiGfPkuT61"},{"type":"inlineCode","value":"ibis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BCKPFL073V"},{"type":"text","value":" is being lazy.  We see the same definition of the table as before, only this time it has a name ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bN6rsSriSJ"},{"type":"inlineCode","value":"r0","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hgs3feUUZP"},{"type":"text","value":", and we see a “plan of execution”, that ibis will return the first 5 rows ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ftRSxzUsxB"},{"type":"inlineCode","value":"Limit[r0, 5]","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uwJG8kbIRy"},{"type":"text","value":".  We can force it to execute this plan with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pWvB9LdFe0"},{"type":"inlineCode","value":"execute()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lpIpw9i67M"},{"type":"text","value":" :","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fCigNy1Fqw"}],"key":"RuDt3WMcPa"}],"key":"qgLZhKdUhE"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"tsmetrics.head().execute()","key":"OYZwWKa0MI"},{"type":"output","id":"hBg-trlMC_aUNfVqM0ukG","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tscategory</th>\n      <th>tsshort</th>\n      <th>tslong</th>\n      <th>tsunitsshort</th>\n      <th>tsunitslong</th>\n      <th>tsunique</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>OTHER TIME SERIES DATA</td>\n      <td>AQ</td>\n      <td>Aquaculture</td>\n      <td>MT</td>\n      <td>metric tons</td>\n      <td>AQ-MT</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>OTHER TIME SERIES DATA</td>\n      <td>ASP</td>\n      <td>Annual surplus production</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>ASP-MT</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>TOTAL BIOMASS</td>\n      <td>BdivBmgtpref</td>\n      <td>General biomass time series preferentially rel...</td>\n      <td>dimensionless</td>\n      <td>dimensionless</td>\n      <td>BdivBmgtpref-dimensionless</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>TOTAL BIOMASS</td>\n      <td>BdivBmgttouse</td>\n      <td>General biomass time series relative to manage...</td>\n      <td>dimensionless</td>\n      <td>dimensionless</td>\n      <td>BdivBmgttouse-dimensionless</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TOTAL BIOMASS</td>\n      <td>BdivBmsypref</td>\n      <td>General biomass time series preferentially rel...</td>\n      <td>dimensionless</td>\n      <td>dimensionless</td>\n      <td>BdivBmsypref-dimensionless</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"               tscategory        tsshort  \\\n0  OTHER TIME SERIES DATA             AQ   \n1  OTHER TIME SERIES DATA            ASP   \n2           TOTAL BIOMASS   BdivBmgtpref   \n3           TOTAL BIOMASS  BdivBmgttouse   \n4           TOTAL BIOMASS   BdivBmsypref   \n\n                                              tslong   tsunitsshort  \\\n0                                        Aquaculture             MT   \n1                          Annual surplus production             MT   \n2  General biomass time series preferentially rel...  dimensionless   \n3  General biomass time series relative to manage...  dimensionless   \n4  General biomass time series preferentially rel...  dimensionless   \n\n     tsunitslong                     tsunique  \n0    metric tons                        AQ-MT  \n1    Metric tons                       ASP-MT  \n2  dimensionless   BdivBmgtpref-dimensionless  \n3  dimensionless  BdivBmgttouse-dimensionless  \n4  dimensionless   BdivBmsypref-dimensionless  ","content_type":"text/plain"}}}],"key":"bgzmjTt4xN"}],"key":"kGZui6LfMZ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"At last, we are starting to see what the data really looks like. Data tables can quickly become much to large to explore by simply trying to eyeball every row.  For instance, we notice the first column, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lsHoJYuKSE"},{"type":"inlineCode","value":"tscategory","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wYwEoraMES"},{"type":"text","value":", shows a few different possible categories for the various metrics in the database.  So, how many distinct categories are there?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DfC4SVIJna"}],"key":"vp8NUxyh1y"},{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"select()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"z5Zz1SIoBN"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sooCl7zzoe"},{"type":"inlineCode","value":"distinct()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iFMUIM7i83"}],"identifier":"select-and-distinct","label":"select() and distinct()","html_id":"select-and-distinct","implicit":true,"key":"ffLli5paYp"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"To answer this, we will introduce a few more methods of data table manipulation. ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"N3OZPAY0s0"},{"type":"inlineCode","value":"select()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ReyOR8aE4h"},{"type":"text","value":" selects one or more ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jiT5bMKVCN"},{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"columns","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mpllIlM2sn"}],"key":"RvvzrXZe5U"},{"type":"text","value":" of a given table, while ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"MXj5Ct1tps"},{"type":"inlineCode","value":"distinct()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"XhY9pJzpzj"},{"type":"text","value":" returns only distinct (unique) rows of the table.  Note that both of these methods share a common pattern -- they both apply to a table (not some piece of a table, like a row or column or cell), and they both return a new table as well that is some subset of the old table.  table in, table out.  This design is very intentional -- by having methods designed specificially to operate on tables and return tables, we can easily stack or chain these together, (also true of ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wII7fO8Fm1"},{"type":"inlineCode","value":"head()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"csLEVsP1DL"},{"type":"text","value":" and execute()`.  So let’s try and see distinct categories:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YYtiWJm5TI"}],"key":"NEmlY3w3qe"}],"key":"Gq2eQept8K"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"(tsmetrics\n .select(\"tscategory\")\n .distinct()\n .head(10)\n .execute()\n)\n ","key":"FiLbEdpK0Y"},{"type":"output","id":"OT0eov_hE7BZNPY5yvl-n","data":[{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tscategory</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>OTHER TIME SERIES DATA</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SPAWNING STOCK BIOMASS or CPUE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PRODUCTION</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>TOTAL BIOMASS</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RECRUITS (NOTE: RECRUITS ARE OFFSET IN TIME SE...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>TIME UNITS</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CATCH or LANDINGS</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>FISHING MORTALITY</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"                                          tscategory\n0                             OTHER TIME SERIES DATA\n1                     SPAWNING STOCK BIOMASS or CPUE\n2                                         PRODUCTION\n3                                      TOTAL BIOMASS\n4  RECRUITS (NOTE: RECRUITS ARE OFFSET IN TIME SE...\n5                                         TIME UNITS\n6                                  CATCH or LANDINGS\n7                                  FISHING MORTALITY","content_type":"text/plain"}}}],"key":"gVdAnZ2NVU"}],"key":"Vgo5dgFelc"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note that we have stacked these methods together with each step on it’s own line by wrapping the whole thing inside ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EG70fCIzy5"},{"type":"inlineCode","value":"()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"X7fJi7HmoT"},{"type":"text","value":" parentheses.  This can make a long “chain” of commands easier to read.  While we have asked for no more that 10 values, we have gotten back only 8 -- so we now know there are only 8 categories.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IiKmWKAbiD"}],"key":"Uq8OcyOc6O"},{"type":"heading","depth":2,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"inlineCode","value":"filter()","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"gdXjVyo0qD"}],"identifier":"filter","label":"filter()","html_id":"filter","implicit":true,"key":"glCYSy7qbr"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"What are the different unit types within, say, the “CATCH or LANDINGS” category?  This requires a subset of ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Ki8GKRna4b"},{"type":"emphasis","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"rows","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"HS12n68PBq"}],"key":"wecGZ4JQgx"},{"type":"text","value":" (a ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"uxnXdbbC2G"},{"type":"emphasis","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"filter","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"t1R9fx8enF"}],"key":"mlvxjD1IrE"},{"type":"text","value":"), rather than a subset of columns (","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ICwUQaLwCX"},{"type":"inlineCode","value":"select()","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"HsyzEnTUxz"},{"type":"text","value":"):","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"zKzEyUqDE3"}],"key":"hh2GY0blQQ"}],"key":"Xp1Bthte7i"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"(tsmetrics\n .filter(_.tscategory == \"CATCH or LANDINGS\")\n .distinct()\n .head(14)\n .execute()\n)","key":"m9Alc0dels"},{"type":"output","id":"R68fwhz2vftrTYv25umvV","data":[{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tscategory</th>\n      <th>tsshort</th>\n      <th>tslong</th>\n      <th>tsunitsshort</th>\n      <th>tsunitslong</th>\n      <th>tsunique</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CATCH or LANDINGS</td>\n      <td>CdivMSY-conv</td>\n      <td>Catch divided by MSY calculated from converted...</td>\n      <td>ratio</td>\n      <td>ratio</td>\n      <td>CdivMSY-conv-ratio</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CATCH or LANDINGS</td>\n      <td>CdivMSY</td>\n      <td>Catch divided by MSY</td>\n      <td>ratio</td>\n      <td>ratio</td>\n      <td>CdivMSY-ratio</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TAC-A2</td>\n      <td>Total allowable catch In subarea</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>TAC-A2-MT</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TC-3</td>\n      <td>Total catch. Use only when there is more than ...</td>\n      <td>E03</td>\n      <td>Thousands</td>\n      <td>TC-3-E03</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TL-1</td>\n      <td>Total landings. Use only when there is more th...</td>\n      <td>E03MT</td>\n      <td>Thousands of metric tons</td>\n      <td>TL-1-E03MT</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TL-A1</td>\n      <td>Total landings in subarea</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>TL-A1-MT</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TL-A3</td>\n      <td>Total landings in subarea</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>TL-A3-MT</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>CATCH or LANDINGS</td>\n      <td>CdivMSY-est</td>\n      <td>Catch divided by MSY calculated from model-est...</td>\n      <td>ratio</td>\n      <td>ratio</td>\n      <td>CdivMSY-est-ratio</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TAC</td>\n      <td>Total allowable catch</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>TAC-MT</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TC-2</td>\n      <td>Total catch (i.e. landings + discards. Add lan...</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>TC-2-MT</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TC</td>\n      <td>Total catch (i.e. landings + discards. Add lan...</td>\n      <td>E06</td>\n      <td>Millions</td>\n      <td>TC-E06</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TL-2</td>\n      <td>Total landings. Use only when there is more th...</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>TL-2-MT</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>CATCH or LANDINGS</td>\n      <td>TL-A4</td>\n      <td>Total landings in subarea</td>\n      <td>MT</td>\n      <td>Metric tons</td>\n      <td>TL-A4-MT</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>CATCH or LANDINGS</td>\n      <td>CdivMSY-dvmb</td>\n      <td>Catch divided by MSY calculated from reference...</td>\n      <td>ratio</td>\n      <td>ratio</td>\n      <td>CdivMSY-dvmb-ratio</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"           tscategory       tsshort  \\\n0   CATCH or LANDINGS  CdivMSY-conv   \n1   CATCH or LANDINGS       CdivMSY   \n2   CATCH or LANDINGS        TAC-A2   \n3   CATCH or LANDINGS          TC-3   \n4   CATCH or LANDINGS          TL-1   \n5   CATCH or LANDINGS         TL-A1   \n6   CATCH or LANDINGS         TL-A3   \n7   CATCH or LANDINGS   CdivMSY-est   \n8   CATCH or LANDINGS           TAC   \n9   CATCH or LANDINGS          TC-2   \n10  CATCH or LANDINGS            TC   \n11  CATCH or LANDINGS          TL-2   \n12  CATCH or LANDINGS         TL-A4   \n13  CATCH or LANDINGS  CdivMSY-dvmb   \n\n                                               tslong tsunitsshort  \\\n0   Catch divided by MSY calculated from converted...        ratio   \n1                                Catch divided by MSY        ratio   \n2                    Total allowable catch In subarea           MT   \n3   Total catch. Use only when there is more than ...          E03   \n4   Total landings. Use only when there is more th...        E03MT   \n5                           Total landings in subarea           MT   \n6                           Total landings in subarea           MT   \n7   Catch divided by MSY calculated from model-est...        ratio   \n8                               Total allowable catch           MT   \n9   Total catch (i.e. landings + discards. Add lan...           MT   \n10  Total catch (i.e. landings + discards. Add lan...          E06   \n11  Total landings. Use only when there is more th...           MT   \n12                          Total landings in subarea           MT   \n13  Catch divided by MSY calculated from reference...        ratio   \n\n                 tsunitslong            tsunique  \n0                      ratio  CdivMSY-conv-ratio  \n1                      ratio       CdivMSY-ratio  \n2                Metric tons           TAC-A2-MT  \n3                  Thousands            TC-3-E03  \n4   Thousands of metric tons          TL-1-E03MT  \n5                Metric tons            TL-A1-MT  \n6                Metric tons            TL-A3-MT  \n7                      ratio   CdivMSY-est-ratio  \n8                Metric tons              TAC-MT  \n9                Metric tons             TC-2-MT  \n10                  Millions              TC-E06  \n11               Metric tons             TL-2-MT  \n12               Metric tons            TL-A4-MT  \n13                     ratio  CdivMSY-dvmb-ratio  ","content_type":"text/plain"}}}],"key":"AxoSKtwRvJ"}],"key":"cuzCWX8YDD"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This syntax to subset rows (filter) is more complicated than columns (select) -- to find rows containing “CATCH or LANDINGS” we have to indicate ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SHSnKBDUIv"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"which","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ijQoOFpxpR"}],"key":"ndxoPdo2rz"},{"type":"text","value":" column to look for.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kjzRdYcYvk"}],"key":"Yz5FgTrort"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"column selection and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YPaKJbBwgo"},{"type":"inlineCode","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mGC25BiiZA"}],"identifier":"column-selection-and","label":"column selection and .","html_id":"column-selection-and","implicit":true,"key":"tOZJGxxbli"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For python to know that we are looking for the column called “tscategory”, we use the column selection ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Oi9509tj3g"},{"type":"inlineCode","value":"_.tscategory","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uUY2m4Yx5H"},{"type":"text","value":".  This is actually a shorthand for the pattern ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"l91BtzltsW"},{"type":"inlineCode","value":"tsmetrics.tscategory","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xPRImAq3sC"},{"type":"text","value":" -- the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kqna9FAK7L"},{"type":"inlineCode","value":"_","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"iDxuc3cfW3"},{"type":"text","value":" is a placeholder for “the current table” in our chain.  Extracting a single column with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"iQ9eL0w6MD"},{"type":"inlineCode","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yYBIMvj5CM"},{"type":"text","value":" is itself something of a shorthand, it is equivalent to using the selector ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"LKyLGZPElH"},{"type":"inlineCode","value":"[","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VxxVHwSQrI"},{"type":"text","value":", as ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xynzrXES2R"},{"type":"inlineCode","value":"tsmetrics[\"category\"]","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"p39f6z5pCR"},{"type":"text","value":".  When a column name is also the name of a table method, we may need to fall back on the square bracket convention.  So why use a dot at all?  In addition to taking two less characters to write, the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"sZML6jdBM8"},{"type":"inlineCode","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"rnrjjzWZKv"},{"type":"text","value":" method allows “tab completion” of the column name, which helps us avoid typos.  Note that our ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"oM3V2Xrk2t"},{"type":"inlineCode","value":"select()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RrBlfo2A8s"},{"type":"text","value":" method recognizes either syntax, you can do: ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"S4T4LuM0iv"},{"type":"inlineCode","value":"tsmetrics.select(_.tscategory)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"n3usMaFdj1"},{"type":"text","value":".  This looks slightly more cryptic, but benefits from autocomplete and matches the sytnax of other functions.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"chIJheZd6G"}],"key":"ZdCnud0Qii"},{"type":"heading","depth":3,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"inlineCode","value":"==","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"giYm6DrE4i"},{"type":"text","value":" not ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"thQSXMhEgM"},{"type":"inlineCode","value":"=","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"SAcB87N0in"}],"identifier":"id-not","label":"== not =","html_id":"id-not","implicit":true,"key":"ytskmPhxlA"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Another common mistake is to use a single ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"kt79sy6IJS"},{"type":"inlineCode","value":"=","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Y27Astr4ad"},{"type":"text","value":" sign rather than ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"zK13TcZjSo"},{"type":"inlineCode","value":"==","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"PiVY978cYT"},{"type":"text","value":" in filter.  Recall that ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"g9WnZKPE5W"},{"type":"inlineCode","value":"=","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"b0dZnyK8K4"},{"type":"text","value":" is used in variable assignment, ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"aV9hX79eMm"},{"type":"inlineCode","value":"a = 1","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"zQ175Ugrjq"},{"type":"text","value":" sets the value of ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"vX9nYWikqd"},{"type":"inlineCode","value":"a","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"rZD5Ce39TU"},{"type":"text","value":" as 1.  Double-equals is a “boolean operator”, that tests if the statement is True or False:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ZuYYSRbKQT"}],"key":"Cgfo8Nc9ns"}],"key":"ERcKfGxde4"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"a = 1\na == 1\n","key":"J4ROW0kh59"},{"type":"output","id":"z_mQYxEBWQgVdo42_U29_","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"True","content_type":"text/plain"}}}],"key":"rVhx5PAxcA"}],"key":"P6y3I9W6pc"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Other boolean operators include ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d67RyI5EOE"},{"type":"inlineCode","value":">","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EkbFieEx3B"},{"type":"text","value":", ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mRHMArgCpz"},{"type":"inlineCode","value":">=","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xeUZMNxvf0"},{"type":"text","value":", ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"I74XYtI77n"},{"type":"inlineCode","value":"!=","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J2B1pSStxh"},{"type":"text","value":" (not equal) and so forth. The important thing is to know that we can do boolean comparisons, this syntax is easy to look up.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Cx5ZM8LoJh"}],"key":"T9xEnAaveh"},{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Next steps","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pMI140eF9u"}],"identifier":"next-steps","label":"Next steps","html_id":"next-steps","implicit":true,"key":"CrKaG2kjbk"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Explore the datasets in this collection using ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bh4b29D4lv"},{"type":"inlineCode","value":"select()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pREEXdwwHc"},{"type":"text","value":", ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yHlRnzrDnm"},{"type":"inlineCode","value":"distinct()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"WxdlL5Ano4"},{"type":"text","value":" and ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"f0xU7zbBVr"},{"type":"inlineCode","value":"filter()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ff3J0qPMC5"},{"type":"text","value":".  We will return to this list of Catch units after we become more aquainted with the remaining tables.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"UMF5kBr3tR"}],"key":"HQHMqPDp1S"}],"key":"mghoC2JJzf"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This syntax is harder than ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qgY8uSXWPC"},{"type":"inlineCode","value":"select()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bthVJCAWFv"},{"type":"text","value":" -- we can’t just filter for “CATCH or LANDINGS” without indicating which column we are looking in.  To signal that ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EoLKQjECpi"},{"type":"inlineCode","value":"tscategory","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GMbyQYFtI9"},{"type":"text","value":" is a column name and not just a piece of text, we use the subsetting notation, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vv0YM8FmiJ"},{"type":"inlineCode","value":"_.tscategory","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"N0bnMYNuab"},{"type":"text","value":".  This is merely a shorthand for the more verbose:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xqXVWjtlKT"}],"key":"JuB5I149Ph"}],"key":"LFMvWkYmtA"}],"key":"TfLdpsgKNi"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Transforming Data","url":"/transform","group":"Textbook"},"next":{"title":"ibis Table Joins","url":"/ibis-2","group":"Textbook"}}},"domain":"http://localhost:3000"}